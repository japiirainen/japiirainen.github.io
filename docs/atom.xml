<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Feed title</title>
    <link href="https://japiirainen.com//atom.xml" rel="self" />
    <link href="https://japiirainen.com/" />
    <id>https://japiirainen.com//atom.xml</id>
    <author>
        <name>Joona Piirainen</name>
        <email>joona.piirainen@gmail.com</email>
    </author>
    <updated>2022-02-08T00:00:00Z</updated>
    <entry>
    <title>Implementing parser combinators pt. 2</title>
    <link href="https://japiirainen.com//posts/blog2.html" />
    <id>https://japiirainen.com//posts/blog2.html</id>
    <published>2022-02-08T00:00:00Z</published>
    <updated>2022-02-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
  <em>Posted on February  8, 2022  by Joona </em><br /><br />
</div>

<p>Welcome to part 2 of the series where we implement a simple <em>parser combinator</em> library from scratch in haskell. In the first episode we defined our <em>Parser</em> type and implemented all the necessary type-classes for it. You can find the source <a href="https://github.com/japiirainen/microparser">here</a>. In addition to this we defined a couple of <em>combinators</em>, which allowed us to defined the following parser.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pKv ::</span> <span class="dt">Parser</span> <span class="dt">KV</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>pKv <span class="ot">=</span> <span class="dt">KV</span> <span class="op">&lt;$&gt;</span> parseKv</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    parseKv <span class="ot">=</span> (,) <span class="op">&lt;$&gt;</span> many alpha <span class="op">&lt;*</span> char <span class="ch">&#39;:&#39;</span> <span class="op">&lt;*</span> spaces <span class="op">&lt;*&gt;</span> many alpha</span></code></pre></div>
<p>This simple parser parses key-value pairs into an haskell data type. We are also able to <em>run</em> our parser.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>runParser pKv <span class="st">&quot;key: value&quot;</span> <span class="co">-- Right (KV (&quot;key&quot;,&quot;value&quot;))</span></span></code></pre></div>
<p>This is already quite useful, but lets implement more <em>combinators</em> to make our little library feel a bit more polished. It would be nice if we could easily extend our previously defined <em>pKv</em> parser to parse lists of key value pairs. This will be trivial if we define a combinator called <em>sepBy</em>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">sepBy1 ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b <span class="ot">-&gt;</span> <span class="dt">Parser</span> [a]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>sepBy1 p sep <span class="ot">=</span> (<span class="op">:</span>) <span class="op">&lt;$&gt;</span> p <span class="op">&lt;*&gt;</span> many (sep <span class="op">*&gt;</span> p)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ot">sepBy ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b <span class="ot">-&gt;</span> <span class="dt">Parser</span> [a]</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>sepBy parser separator <span class="ot">=</span> sepBy1 parser separator <span class="op">&lt;|&gt;</span> <span class="fu">pure</span> []</span></code></pre></div>
<p>Note that we defined <em>sepBy</em> by using a stricter version of itself. <em>sepBy1</em> will fail if there is only one <em>kv</em> to parse, while <em>sepBy</em> parses it happily.</p>
<p>Now defining a parser that parses a list of <em>kv’s</em> is trivial.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pKvs ::</span> <span class="dt">Parser</span> [<span class="dt">KV</span>]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>pKvs <span class="ot">=</span> pKv <span class="ot">`sepBy`</span> char <span class="ch">&#39;,&#39;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>runParser pKvs <span class="st">&quot;key: value,foo: bar&quot;</span> <span class="co">-- Right [KV (&quot;key&quot;,&quot;value&quot;),KV (&quot;foo&quot;,&quot;bar&quot;)]</span></span></code></pre></div>
<p>Nice. Now that I think of it, wouldn’t it be nice to be able to parse numbers? I think so!</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Maybe</span> (fromMaybe)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Applicative</span> (<span class="dt">Alternative</span>(..), optional) </span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Functor</span> (($&gt;))</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ot">digit ::</span> <span class="dt">Parser</span> <span class="dt">Char</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>digit <span class="ot">=</span> satisfy <span class="st">&quot;digit&quot;</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isDigit</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="ot">decimal ::</span> (<span class="dt">Integral</span> a, <span class="dt">Read</span> a) <span class="ot">=&gt;</span> <span class="dt">Parser</span> a</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>decimal <span class="ot">=</span> <span class="fu">read</span> <span class="op">&lt;$&gt;</span> many1 digit</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="ot">signedDecimal ::</span> <span class="dt">Parser</span> <span class="dt">Int</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>signedDecimal <span class="ot">=</span> fromMaybe <span class="fu">id</span> <span class="op">&lt;$&gt;</span> optional (char <span class="ch">&#39;-&#39;</span> <span class="op">$&gt;</span> <span class="fu">negate</span>) <span class="op">&lt;*&gt;</span> decimal</span></code></pre></div>
<p>Now we can parse numbers, Hooray! Here’s a couple of examples.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>runParser (decimal <span class="op">@</span><span class="dt">Int</span>) <span class="st">&quot;123&quot;</span> <span class="co">-- Right (123)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>runParser (decimal <span class="op">@</span><span class="dt">Int</span>) <span class="st">&quot;-123&quot;</span> <span class="co">-- Left &quot;Expecting digit at position 0&quot;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>runParser signedDecimal <span class="st">&quot;-123&quot;</span> <span class="co">-- Right (-123)</span></span></code></pre></div>
<p>Parsing whitespace is also a common task, especially when you are writing a <em>lexer</em>. Let’s define some useful combinators to make <em>lexing</em> more convenient.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spaces ::</span> <span class="dt">Parser</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>spaces <span class="ot">=</span> void <span class="op">$</span> many (satisfy <span class="st">&quot;whitespace&quot;</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isSpace</span>)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ot">newline ::</span> <span class="dt">Parser</span> ()</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>newline <span class="ot">=</span> char <span class="ch">&#39;\n&#39;</span> <span class="op">&lt;|&gt;</span> (char <span class="ch">&#39;\r&#39;</span> <span class="op">*&gt;</span> char <span class="ch">&#39;\n&#39;</span>)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="ot">horizontalSpaces ::</span> <span class="dt">Parser</span> ()</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>horizontalSpaces <span class="ot">=</span> void <span class="op">.</span> many <span class="op">$</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  satisfy <span class="st">&quot;horizontal whitespace&quot;</span> <span class="op">$</span> \c <span class="ot">-&gt;</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Char</span><span class="op">.</span><span class="fu">isSpace</span> c <span class="op">&amp;&amp;</span> c <span class="op">/=</span> <span class="ch">&#39;\n&#39;</span> <span class="op">&amp;&amp;</span> c <span class="op">/=</span> <span class="ch">&#39;\r&#39;</span></span></code></pre></div>
<p>When we previously parsed key value pairs, they were separated by commas. You might also want to parse key value pairs separated by newlines.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>key: value</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>foo: bar</span></code></pre></div>
<p>Let’s write a parser for this.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pKvsNewLine ::</span> <span class="dt">Parser</span> [<span class="dt">KV</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>pKvsNewLine <span class="ot">=</span> pKv <span class="ot">`sepBy`</span> newline</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>runParser pKvsNewLine <span class="st">&quot;key: value\nfoo: bar&quot;</span> <span class="co">-- Right [KV (&quot;key&quot;,&quot;value&quot;),KV (&quot;foo&quot;,&quot;bar&quot;)]</span></span></code></pre></div>
<p>Or we could want to parse <em>kv’s</em> which are separated by commas but have some random spaces in between them. Eg. “key: value , foo: bar”. We can use <em>horizontalSpaces</em> for this!</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pKvsHorizontal ::</span> <span class="dt">Parser</span> [<span class="dt">KV</span>]</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>pKvsHorizontal <span class="ot">=</span> pKv <span class="ot">`sepBy`</span> s</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> s <span class="ot">=</span> horizontalSpaces <span class="op">*&gt;</span> char <span class="ch">&#39;,&#39;</span> <span class="op">&lt;*</span> horizontalSpaces</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>runParser pKvsHorizontal <span class="st">&quot;key: value       ,        foo: bar&quot;</span> <span class="co">-- Right [KV (&quot;key&quot;,&quot;value&quot;),KV (&quot;foo&quot;,&quot;bar&quot;)]</span></span></code></pre></div>
<p>At this point we have quite a powerful set of tools in our hands. We still haven’t seen any interesting use-cases for this machinery. In the next part we will define a parser for a simple programming language.</p>
<p>Thank you for reading, hope you enjoyed. Have a nice day! - Joona</p>
<p><a href="https://japiirainen.com/posts/parser-combinators-1.html">Part 1</a></p>
]]></summary>
</entry>
<entry>
    <title>Implementing parser combinators pt. 1</title>
    <link href="https://japiirainen.com//posts/parser-combinators-1.html" />
    <id>https://japiirainen.com//posts/parser-combinators-1.html</id>
    <published>2022-01-09T00:00:00Z</published>
    <updated>2022-01-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
  <em>Posted on January  9, 2022  by Joona </em><br /><br />
</div>

<p>One of the many strengths of haskell is the ability to easily embed other small languages (sometimes called EDSL, short for embedded domain specific language) inside it. One famous example of this is the family of libraries known as parser combinators. They aim to solve the task of parsing structured text into well-typed data-structures, and succeed in it quite beautifully. In this short series of blog posts I will show you how to implement a simple and usable parser combinator library. You can find the source code for the library we will develop <a href="https://github.com/japiirainen/microparser">here</a>. For real world use-cases you should propably just use <a href="https://hackage.haskell.org/package/megaparsec"><strong><em>megaparsec</em></strong></a>.</p>
<h1 id="microparser">MicroParser</h1>
<p>So now let’s build own own toy parser combinator library! We will call it <strong><em>MicroParser</em></strong>.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DeriveFunctor #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">MicroParser</span> <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Applicative</span> (<span class="dt">Alternative</span> (..))</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> (void)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Char</span> <span class="kw">as</span> <span class="dt">Char</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.List</span> (intercalate)</span></code></pre></div>
<p>Let’s start by thinking what the type of a parser should be? Structurally a parser is a function which takes an input stream of characters and yields a parse tree by applying the parsing logic over the input stream of characters to build up a composite data structure.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ParseResult</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="dt">ParseSuccess</span> <span class="op">!</span>a <span class="op">!</span><span class="dt">Int</span> <span class="dt">String</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">ParseFailure</span> [(<span class="dt">Int</span>, <span class="dt">String</span>)]</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">deriving</span> (<span class="dt">Functor</span>, <span class="dt">Show</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Parser</span> a </span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="dt">Parser</span> {unParser </span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="ot">              ::</span> <span class="dt">Int</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>              <span class="co">-- ^ offset</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>              <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>              <span class="co">-- ^ input stream of characters</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>              <span class="ot">-&gt;</span> <span class="dt">ParseResult</span> a</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>              }</span></code></pre></div>
<p>Our parser is polymorphic over the thing our parser should produce when successful. Internally our parser function takes an <code>Int</code> as it’s first argument, which represents the position of the character we are currently parsing. This is useful for reporting errors. Other than that the type is relatively straight forward. Let’s define a function for running a parser.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">runParser ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> a</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>runParser (<span class="dt">Parser</span> p) ts <span class="ot">=</span> <span class="kw">case</span> p <span class="dv">0</span> ts <span class="kw">of</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ParseSuccess</span> x _ _ <span class="ot">-&gt;</span> <span class="dt">Right</span> x</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ParseError</span> es <span class="ot">-&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Left</span> <span class="op">$</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;Expecting &quot;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;&gt;</span> intercalate</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot; OR &quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>          [ e <span class="op">&lt;&gt;</span> <span class="st">&quot; at position &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> i</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> (i, e) <span class="ot">&lt;-</span> es</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>          ]</span></code></pre></div>
<p>Running a parser yields either a parse result when successful and an error message in the case of an error, which we represent here as a (somewhat) formatted string. In proper parser combinator libraries error handling is handled in more elegant and structured ways.</p>
<p>Now we have defined the basic structure of our library, but it is not very usable at this point. We have no convenient way of constructing parsers nor do we have any way of combining them. So clearly we need to do some more work. The power of parser combinators mostly come from the typeclass instances we define for our <code>Parser</code> type. Especially <code>Applicative</code> and <code>Alternative</code> in our case. Some parser combinator libraries encourage the usage of the syntactic sugar haskell provides for monads. We are not going to define a monad instance for our parser since we can do plenty without it.</p>
<p>To define <code>Applicative</code> and <code>Alternative</code> instances we need to first define <code>Functor</code> for out <code>Parser</code> type. Here is the <code>Functor</code> instance definition for our <code>Parser</code> type.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Parser</span> <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">fmap</span> f (<span class="dt">Parser</span> p) <span class="ot">=</span> <span class="dt">Parser</span> (\i ts <span class="ot">-&gt;</span> <span class="fu">fmap</span> f (p i ts))</span></code></pre></div>
<p>Now we can move on to the more interesting instances. Let’s start with Applicative.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> <span class="dt">Parser</span> <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> x <span class="ot">=</span> <span class="dt">Parser</span> (<span class="dt">ParseSuccess</span> x)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Parser</span> a <span class="op">&lt;*&gt;</span> <span class="dt">Parser</span> b <span class="ot">=</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Parser</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>            ( \i ts <span class="ot">-&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>                <span class="kw">case</span> f i ts <span class="kw">of</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>                  <span class="dt">ParseError</span> es <span class="ot">-&gt;</span> <span class="dt">ParseError</span> es</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>                  <span class="dt">ParseSuccess</span> x i&#39; ts&#39; <span class="ot">-&gt;</span> <span class="kw">case</span> g i&#39; ts&#39; <span class="kw">of</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">ParseError</span> es&#39; <span class="ot">-&gt;</span> <span class="dt">ParseError</span> es&#39;</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">ParseSuccess</span> x&#39; i&#39;&#39; ts&#39;&#39; <span class="ot">-&gt;</span> <span class="dt">ParseSuccess</span> (x x&#39;) i&#39;&#39; ts&#39;&#39;</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>            )</span></code></pre></div>
<p>This might be a bit intimidating if you are unfamiliar with <code>Applicative</code>. I’ll not go through explaining <code>Applicatives</code> in detail here, since it’s out of the scope of this blog post, but I highly suggest learning what they are and to start building an intuition on when you should use them. <a href="https://wiki.haskell.org/Typeclassopedia#Applicative">Here</a> is a good starting point.</p>
<h3 id="alternatives">Alternatives</h3>
<p>Next we will define <code>Alternative</code>. Alternative is not as well known as typeclasses such as <code>Functor</code>, <code>Applicative</code> and <code>Monad</code> but are super useful for our use-case, so I think it’s worth looking at them in a bit more detail. The <code>Alternative</code> typeclass has four members including <code>empty</code>, <code>some</code>, <code>many</code> and most importantly for us <code>&lt;|&gt;</code>. Let’s explore what <code>&lt;|&gt;</code> does. The <code>Maybe</code> data type is well known so I will use it for demostration purposes since most people know what it represents. For me the mental model for <code>&lt;|&gt;</code> is the following. “Try executing the left hand side function and if successful, return the result, otherwise return the result of calling the right hand side function”. (This mental model happens to work for <code>Maybe</code>, but is not always correct since the operator can have different effects on other data types.)</p>
<pre class="shell"><code>ghci&gt; Just 4 &lt;|&gt; Just 5
Just 4
ghci&gt; Just 4 &lt;|&gt; Nothing
Just 4
ghci&gt; Nothing &lt;|&gt; Just 4
Just 4
ghci&gt; Nothing &lt;|&gt; Nothing
Nothing</code></pre>
<p>But we are implementing parsers… how can we use this? Well we can express <strong><em>choice</em></strong> with it. Particulally we can think of it as saying “try parse this, then try parse this, then try parse this, and so on”. This might sound a bit abstract at this point. But will become clear when we are finished!</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Alternative</span> <span class="dt">Parser</span> <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  empty <span class="ot">=</span> <span class="dt">Parser</span> (\_ _ <span class="ot">-&gt;</span> <span class="dt">ParseError</span> [])</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Parser</span> f <span class="op">&lt;|&gt;</span> <span class="dt">Parser</span> g <span class="ot">=</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Parser</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      ( \i ts <span class="ot">-&gt;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>          <span class="kw">case</span> f i ts <span class="kw">of</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>            success<span class="op">@</span><span class="dt">ParseSuccess</span> {} <span class="ot">-&gt;</span> success</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>            <span class="dt">ParseError</span> errs0 <span class="ot">-&gt;</span> <span class="kw">case</span> g i ts <span class="kw">of</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>              success<span class="op">@</span><span class="dt">ParseSuccess</span> {} <span class="ot">-&gt;</span> success</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>              <span class="dt">ParseError</span> errs1 <span class="ot">-&gt;</span> <span class="dt">ParseError</span> (errs0 <span class="op">&lt;&gt;</span> errs1)</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>      )</span></code></pre></div>
<p>This instance definition actually follows the mental model quite clearly. “Run the first parser, if successful, return the results, otherwise run the second parser”.</p>
<p>We are getting closer. Almost all the hard work is now done and we can move on to the fun part.</p>
<h3 id="combinators">Combinators</h3>
<p>To wrap up the first part of this series of posts, we will define a fundamental combinator found in almost all of the parser combinator libraries, <code>satisfy</code>, and show a couple of use-cases for it. We will write <code>satisfy</code> in terms of a more general function called <code>satisfyMaybe</code>, which takes a description (used for error messages), a function from <code>Char</code> to a <code>Maybe</code> value indicating weather the character <strong><em>satisfies</em></strong> some condition or not.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">satisfyMaybe ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a) <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>satisfyMaybe descr p <span class="ot">=</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Parser</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    ( \i ts <span class="ot">-&gt;</span> <span class="kw">case</span> ts <span class="kw">of</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>        (t <span class="op">:</span> ts&#39;) <span class="op">|</span> <span class="dt">Just</span> x <span class="ot">&lt;-</span> p t <span class="ot">-&gt;</span> <span class="dt">ParseSuccess</span> x (i <span class="op">+</span> <span class="dv">1</span>) ts&#39;</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>        _ <span class="ot">-&gt;</span> <span class="dt">ParseError</span> [(i, descr)]</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">satisfy ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Char</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>satisfy descr p <span class="ot">=</span> satisfyMaybe descr (\t <span class="ot">-&gt;</span> <span class="kw">if</span> p t <span class="kw">then</span> <span class="dt">Just</span> t <span class="kw">else</span> <span class="dt">Nothing</span>)</span></code></pre></div>
<p>Once we have <code>satisfy</code> we can define various combinators based on it. We will start with one that parses any character, one that parses a <strong><em>specific</em></strong> character, one for parsing whitespace and finally one that parses a specific sequence of characters.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">anyChar ::</span> <span class="dt">Parser</span> <span class="dt">Char</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>anyChar <span class="ot">=</span> satisfy <span class="st">&quot;any character&quot;</span> (<span class="fu">const</span> <span class="dt">True</span>)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ot">char ::</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> ()</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>char c <span class="ot">=</span> void <span class="op">$</span> satisfy (<span class="fu">show</span> c) (<span class="op">==</span> c)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="ot">spaces ::</span> <span class="dt">Parser</span> ()</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>spaces <span class="ot">=</span> void <span class="op">$</span> many (satisfy <span class="st">&quot;whitespace&quot;</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isSpace</span>)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="ot">string ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> ()</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>string [] <span class="ot">=</span> <span class="fu">pure</span> ()</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>string (x <span class="op">:</span> xs) <span class="ot">=</span> char x <span class="op">*&gt;</span> string xs</span></code></pre></div>
<p>Here’s an example of how one might use these. Suppose we want to parse a key value pair into a <code>KV</code> data type.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | example kaye value pair</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ot">text ::</span> <span class="dt">String</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>text <span class="ot">=</span> <span class="st">&quot;key: value&quot;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Data type we would like parse the text into</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">KV</span> <span class="ot">=</span> <span class="dt">KV</span> (<span class="dt">String</span>, <span class="dt">String</span>) <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
<p>We can do this via the following parser. Here we leverage some of the combinators we defined previously.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pKv ::</span> <span class="dt">Parser</span> <span class="dt">KV</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>pKv <span class="ot">=</span> <span class="dt">KV</span> <span class="op">&lt;$&gt;</span> parseKv</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    parseKv <span class="ot">=</span> (,) <span class="op">&lt;$&gt;</span> many alpha <span class="op">&lt;*</span> char <span class="ch">&#39;:&#39;</span> <span class="op">&lt;*</span> spaces <span class="op">&lt;*&gt;</span> many alpha</span></code></pre></div>
<p>Admittedly this example is not the best one and doesn’t show the full power of parser combinators. We need some additional combinators to gain more <strong><em>power</em></strong> to see what they are really capable of. But that is a challenge we will tackle in part 2 of this series of posts.</p>
<p>Thank you for reading, hope you enjoyed. Have a nice day, and until next time! - Joona</p>
]]></summary>
</entry>
<entry>
    <title>Thoughts on Clojure λ</title>
    <link href="https://japiirainen.com//posts/thoughts-on-clojure.html" />
    <id>https://japiirainen.com//posts/thoughts-on-clojure.html</id>
    <published>2022-01-08T00:00:00Z</published>
    <updated>2022-01-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
  <em>Posted on January  8, 2022  by Joona </em><br /><br />
</div>

<p>2021 was the first year I participated in <a href="https://adventofcode.com/"><strong>AdventOfCode</strong></a>, which is the worlds largest programming contest. I solved the 2021 puzzles in Haskell and Python. Doing AOC puzzles became a habit I enjoyed, so I couldn’t stop on the 25th of december, and started solving the year 2015. I do AOC puzzles to improve my general problem solving skills, but they are also a convenient place to learn new programming languages! So obviously (if you read the title) I chose Clojure for the year 2015. In this post I’d like to summarize my thoughts on the language after solving all 25 problems using it.</p>
<h2 id="the-good">The Good</h2>
<h3 id="surprisingly-easy-to-pick-up">Surprisingly easy to pick up</h3>
<p>This was the first time writing in any of the lisp-family programming languages. Surprisingly, the learning curve wasn’t too bad. After a couple of days I felt quite comfortable writing clojure code. Being able to pick up a language quickly is a positive thing for sure!</p>
<h3 id="standard-library">Standard library</h3>
<p>Clojure standard library was great and felt polished. Especially enjoyed the data-structures provided.</p>
<h3 id="threading-macros">Threading macros</h3>
<p>I’m talking about these guys.</p>
<p>Thread-last. This was the variant I used 90% of the time. Don’t know if this is idiomatic, but I guess this is the way I think about the data flowing in programs.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">-&gt;&gt;</span> [<span class="dv">1</span> <span class="dv">2</span> <span class="dv">3</span>] (<span class="kw">map</span> <span class="kw">inc</span>) (<span class="kw">reduce</span> <span class="kw">+</span>)) <span class="co">;; =&gt; 8</span></span></code></pre></div>
<p>Thread-first. Didn’t use this variant too much, but useful for chaining functions that take data as the first argument. (Personally don’t know why everything is not data last??)</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">map</span> #(<span class="kw">-&gt;</span> <span class="va">%</span> (str/split <span class="ss">#&quot;: &quot;</span>) (<span class="kw">nth</span> <span class="dv">1</span>) <span class="kw">read-string</span>) <span class="st">&quot;foo: 123&quot;</span>) <span class="co">;; =&gt; 123</span></span></code></pre></div>
<h3 id="repl">REPL</h3>
<p>Being able to develop API’s using the REPL was nice.</p>
<h3 id="docs">Docs</h3>
<p><a href="https://clojuredocs.org/"><strong><em>clojuredocs</em></strong></a> were nice and had comprehensive and easy to follow examples.</p>
<h2 id="the-bad">The bad</h2>
<h3 id="error-messages">Error messages</h3>
<p>When you got an exception the top most call site would be reported, not where the actual exception occurred. How is that a thing?</p>
<h3 id="getting-my-development-environment-setup">Getting my development environment setup</h3>
<p>This was a pain. I tried using vscode with <a href="https://calva.io/"><strong><em>calva</em></strong></a>, but gave up pretty soon after starting. Ended up using emacs with <a href="https://cider.mx/"><strong><em>cider</em></strong></a>, which was pretty nice, but had a huge learning curve for me since I’m not an emacs user. (Maybe I am after this…)</p>
<h3 id="dynamic-nature-of-lisps">Dynamic nature of lisps</h3>
<p>I’m a believer of strong static types, and using clojure made me have even stronger opinions on the matter. Dynamic typing combined with the error messages was honestly terrible at times. This is probably the biggest reason I will likely not return to writing in clojure (at least if I don’t have to).</p>
<h2 id="summary">Summary</h2>
<p>Overall Clojure was an OK language despite the gripes I have with it. Initially I was steered to trying it since it seems to be kind of popular here in Finland and I wanted to see if I would like to write it professionally at some point. I honestly have no idea if the code I wrote was idiomatic Clojure code or not (probably not). I will link the repo below and please tell me if it was the way I was using the language that made me not enjoy it more than I did.</p>
<p><a href="https://github.com/japiirainen/aoc-2015"><strong><em>Code on Github</em></strong></a></p>
]]></summary>
</entry>
<entry>
    <title>Typesafe express routes</title>
    <link href="https://japiirainen.com//posts/typesafe-express.html" />
    <id>https://japiirainen.com//posts/typesafe-express.html</id>
    <published>2021-06-08T00:00:00Z</published>
    <updated>2021-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
  <em>Posted on June  8, 2021  by Joona </em><br /><br />
</div>

<p>Recently I’ve spent a lot of time writing Haskell. In Haskell-land there’s a lot of bleeding-edge research stuff, which is cool, but most likely not very applicable for my day-to-day work. If there’s one thing that all haskellers love, it must be type-safety. That’s what this post is about, bringing some type-safety to our node.js apps, more specifically express or koa apps. I’ll try to point to some flaws I see in the typical way of writing express/koa apps with typescript and propose a “better” way.</p>
<h2 id="motivating-example">Motivating example</h2>
<p>Let’s start by defining routes we would like to implement. Suppose you are writing some CRUD operations for some “users” resource. We will use the following endpoint schema as an example.</p>
<pre><code>GET /users     =&gt; Ok&lt;[User]&gt;
GET /users/:id =&gt; Ok&lt;User&gt; | NotFound
POST /users    =&gt; Ok | BadRequest
PUT /users/:id =&gt; Ok&lt;User&gt; | BadRequest | NotFound</code></pre>
<p>The example endpoints will be using this interface for querying a “database”. Implementation details of this interface are not relevant for this post. (There is a link at the end to a gist containing all the code in these examples.)</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> UsersRepo {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  all<span class="op">:</span> () <span class="kw">=&gt;</span> <span class="bu">Promise</span><span class="op">&lt;</span>User[]<span class="op">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  findById<span class="op">:</span> (id<span class="op">:</span> <span class="dt">number</span>) <span class="kw">=&gt;</span> <span class="bu">Promise</span><span class="op">&lt;</span>Option<span class="op">&lt;</span>User<span class="op">&gt;&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  create<span class="op">:</span> (name<span class="op">:</span> <span class="dt">string</span>) <span class="kw">=&gt;</span> <span class="bu">Promise</span><span class="op">&lt;</span>Id<span class="op">&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  update<span class="op">:</span> (id<span class="op">:</span> Id<span class="op">,</span> update<span class="op">:</span> { name<span class="op">:</span> <span class="dt">string</span> }) <span class="kw">=&gt;</span> <span class="bu">Promise</span><span class="op">&lt;</span>Option<span class="op">&lt;</span>User<span class="op">&gt;&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<h3 id="lets-write-some-express-endpoints">Let’s write some express endpoints</h3>
<p>Let’s start with the “GET all users” and “GET user by id” endpoints.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">get</span>(<span class="st">&#39;/users&#39;</span><span class="op">,</span> <span class="kw">async</span> (_req<span class="op">,</span> res) <span class="kw">=&gt;</span> {</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> users <span class="op">=</span> <span class="cf">await</span> usersRepo<span class="op">.</span><span class="fu">all</span>()</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> res<span class="op">.</span><span class="fu">json</span>(users)<span class="op">.</span><span class="fu">status</span>(<span class="dv">200</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>})</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">get</span>(<span class="st">&#39;/users/:id&#39;</span><span class="op">,</span> <span class="kw">async</span> (req<span class="op">,</span> res) <span class="kw">=&gt;</span> {</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> user <span class="op">=</span> <span class="cf">await</span> usersRepo<span class="op">.</span><span class="fu">findById</span>(<span class="op">+</span>req<span class="op">.</span><span class="at">params</span><span class="op">.</span><span class="at">id</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="fu">isNone</span>(user)) <span class="cf">return</span> res<span class="op">.</span><span class="fu">status</span>(<span class="dv">404</span>)</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> res<span class="op">.</span><span class="fu">json</span>(user<span class="op">.</span><span class="at">value</span>)<span class="op">.</span><span class="fu">status</span>(<span class="dv">200</span>)</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>})</span></code></pre></div>
<p>The “GET all users” endpoint is not so bad. There’s no risk for anything blowing up because of some type-error. The second endpoint is already starting to show some problems. By default request parameters captured by express is of type “string”, which is bad for us since our database interface requires the user’s id as a number. Nothing is validating that <strong><em>req.params.id</em></strong> is a number, so the conversion to number might throw. Also, nothing is checking that the id is even present in “req.params”.</p>
<p>Next, we’ll look at our POST and PUT endpoints. These start to show the issues I’m trying to highlight.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">post</span>(<span class="st">&#39;/users&#39;</span><span class="op">,</span> <span class="kw">async</span> (req<span class="op">,</span> res) <span class="kw">=&gt;</span> {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> { name } <span class="op">=</span> req<span class="op">.</span><span class="at">body</span> <span class="co">// req bodys type is any. This line also throws if name is not present in req.body</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> id <span class="op">=</span> <span class="cf">await</span> usersRepo<span class="op">.</span><span class="fu">create</span>(name)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> user <span class="op">=</span> <span class="cf">await</span> usersRepo<span class="op">.</span><span class="fu">findById</span>(id)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="fu">isNone</span>(user)) <span class="cf">return</span> res<span class="op">.</span><span class="fu">status</span>(<span class="dv">404</span>)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> res<span class="op">.</span><span class="fu">json</span>(user<span class="op">.</span><span class="at">value</span>)<span class="op">.</span><span class="fu">status</span>(<span class="dv">200</span>)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>})</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">put</span>(<span class="st">&#39;/users/:id&#39;</span><span class="op">,</span> <span class="kw">async</span> (req<span class="op">,</span> res) <span class="kw">=&gt;</span> {</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> { id } <span class="op">=</span> req<span class="op">.</span><span class="at">params</span> <span class="co">// req.params is of type any. Also throws in case id is missing in req.params.</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> user <span class="op">=</span> <span class="cf">await</span> usersRepo<span class="op">.</span><span class="fu">update</span>(<span class="op">+</span>id<span class="op">,</span> req<span class="op">.</span><span class="at">body</span>) <span class="co">// same problem again with req.body</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="fu">isNone</span>(user)) <span class="cf">return</span> res<span class="op">.</span><span class="fu">status</span>(<span class="dv">404</span>)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> res<span class="op">.</span><span class="fu">status</span>(<span class="dv">200</span>)<span class="op">.</span><span class="fu">json</span>(user<span class="op">.</span><span class="at">value</span>)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>})</span></code></pre></div>
<p>I documented some of the problems with code comments. There are also some more nuanced issues I see here. Nothing is checking what status codes we are returning or validating checking that the JSON we are sending is of type User. We could return an elephant instead of a user and the type-system wouldn’t notice a thing. These are not very big problems in this contrived example but I hope you get the point.</p>
<p>Let’s consider the following change in our UsersRepo interface.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>Interface UsersRepo {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  all<span class="op">:</span> () <span class="kw">=&gt;</span> <span class="bu">Promise</span><span class="op">&lt;</span>User[]<span class="op">&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co">// changes to  ⬇️</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>Interface UsersRepo {</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  all<span class="op">:</span> () <span class="kw">=&gt;</span> <span class="bu">Promise</span><span class="op">&lt;</span>Option<span class="op">&lt;</span>User[]<span class="op">&gt;&gt;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>So now for whatever reason, our all users action returns Option of User. What kind of type errors do we get? Is our code going to compile?</p>
<p>Unfortunately yes. Typescript says everything is fine. Hopefully, our test coverage catches these kinds of mistakes, but in my opinion, this should never get through the compilation step.</p>
<h2 id="how-can-we-improve-from-this">How can we improve from this?</h2>
<p>Luckily we are not doomed. There are better ways to do this. I will be using this awesome open-source library called typera. You can use it on top of either express or koa. I’m going to use it with express so I’ll add “typera-express” to my package.json and add the following imports.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> { Route<span class="op">,</span> Response<span class="op">,</span> Parser<span class="op">,</span> route<span class="op">,</span> router } <span class="im">from</span> <span class="st">&#39;typera-express&#39;</span></span></code></pre></div>
<p>Here is the “GET all users” endpoint rewritten with typera.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> users<span class="op">:</span> Route<span class="op">&lt;</span>Response<span class="op">.</span><span class="at">Ok</span><span class="op">&lt;</span>User[]<span class="op">&gt;&gt;</span> <span class="op">=</span> route</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">get</span>(<span class="st">&#39;/users&#39;</span>)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">handler</span>(<span class="kw">async</span> () <span class="kw">=&gt;</span> Response<span class="op">.</span><span class="fu">ok</span>(<span class="cf">await</span> usersRepo<span class="op">.</span><span class="fu">all</span>()))</span></code></pre></div>
<p>Compare it to the previous implementation. Do you see any improvements?</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">get</span>(<span class="st">&#39;/users&#39;</span><span class="op">,</span> <span class="kw">async</span> (_req<span class="op">,</span> res) <span class="kw">=&gt;</span> {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> users <span class="op">=</span> <span class="cf">await</span> usersRepo<span class="op">.</span><span class="fu">all</span>()</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> res<span class="op">.</span><span class="fu">json</span>(users)<span class="op">.</span><span class="fu">status</span>(<span class="dv">200</span>)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>})</span></code></pre></div>
<p>In this simple endpoint, the benefits are not huge, but there are some improvements. First of all, you can see what the endpoint is capable of returning, in this case, <strong><em>Response.Ok User</em></strong>. Also, note the usage of <strong><em>Response.ok()</em></strong> instead of <strong><em>res.json().status(200)</em></strong>. This makes our job easier since we don’t need to think about the status codes we’re returning, thus reducing the chance of us writing bugs.</p>
<p>Here’s the “update user” endpoint rewritten with typera.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> updateUser<span class="op">:</span> Route<span class="op">&lt;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  Response<span class="op">.</span><span class="at">Ok</span><span class="op">&lt;</span>User<span class="op">&gt;</span> <span class="op">|</span> Response<span class="op">.</span><span class="at">NotFound</span> <span class="op">|</span> Response<span class="op">.</span><span class="at">BadRequest</span><span class="op">&lt;</span><span class="dt">string</span><span class="op">&gt;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">=</span> route</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">put</span>(<span class="st">&#39;/users/:id(int)&#39;</span>)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">use</span>(Parser<span class="op">.</span><span class="fu">body</span>(t<span class="op">.</span><span class="fu">type</span>({ name<span class="op">:</span> t<span class="op">.</span><span class="at">string</span> })))</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">handler</span>(<span class="kw">async</span> ({ body<span class="op">,</span> routeParams<span class="op">:</span> { id } }) <span class="kw">=&gt;</span> {</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> updatedM <span class="op">=</span> <span class="cf">await</span> usersRepo<span class="op">.</span><span class="fu">update</span>(id<span class="op">,</span> body)</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (O<span class="op">.</span><span class="fu">isNone</span>(updatedM)) <span class="cf">return</span> Response<span class="op">.</span><span class="fu">notFound</span>()</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> Response<span class="op">.</span><span class="fu">ok</span>(updatedM<span class="op">.</span><span class="at">value</span>)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>  })</span></code></pre></div>
<p>There’s a lot going on, so let’s break it down.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>Route<span class="op">&lt;</span>Response<span class="op">.</span><span class="at">Ok</span> User <span class="op">|</span> Response<span class="op">.</span><span class="at">NotFound</span> <span class="op">|</span> Response<span class="op">.</span><span class="at">BadRequest</span> <span class="dt">string</span><span class="op">&gt;</span></span></code></pre></div>
<p>We list the possible return values of our endpoint.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">put</span>(<span class="st">&#39;/users/:id(int)&#39;</span>)</span></code></pre></div>
<p>This line is interesting. Typera calls these param conversions. Typera will validate that the “id” in query parameter is of type int and return BadRequest in the case this requirement is not met.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">use</span>(Parser<span class="op">.</span><span class="fu">body</span>(t<span class="op">.</span><span class="fu">type</span>({ name<span class="op">:</span> t<span class="op">.</span><span class="at">string</span> })))</span></code></pre></div>
<p>This line takes care of request body validation. You can use any valid io-ts validation schemas with typera. If you are unfamiliar with io-ts, I highly recommend checking it out!</p>
<p>Now the handler function we get the validated and correctly typed request body and query parameters.</p>
<p>That’s a huge improvement compared to the initial version. After embracing the power type-safety gives you, just looking at the initial version is giving me headaches. I know this toy example is not the perfect way to motivate you to introduce this complexity to your codebase since you start seeing the benefits when your application gets bigger and you need to start making changes. The point I’m trying to make is that I think static types and type-safety make your code better, cleaner, and most importantly more maintainable.</p>
<p>Hope you learned something from this post. Cheers!</p>
<h4 id="links">Links</h4>
<ul>
<li><a href="https://github.com/akheron/typera">typera</a></li>
<li><a href="https://gist.github.com/japiirainen/5061fd58d5a7d52f535fb053f99d3bc9">example source of the typera version</a></li>
<li><a href="https://github.com/japiirainen">my github</a></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Immutable data structures in typescript</title>
    <link href="https://japiirainen.com//posts/immutable-ts.html" />
    <id>https://japiirainen.com//posts/immutable-ts.html</id>
    <published>2021-01-28T00:00:00Z</published>
    <updated>2021-01-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
  <em>Posted on January 28, 2021  by Joona </em><br /><br />
</div>

<h1 id="why-would-you-want-immutable-data-structures">Why would you want immutable data structures?</h1>
<p>Immutable data structures are essential when you try to code in a functional way, and JavaScript by itself doesn’t support these. Luckily we can leverage the type system provided by TypeScript to enforce these immutability rules on our frequently used data structures like arrays and objects. I only recently found out about this feature and thought that other people might have also missed out so making this short blog post to hopefully provide useful information for at least a couple of you guys!</p>
<h2 id="arrays">Arrays</h2>
<p><strong><em>Regular way to initialize an array filled with some integers.</em></strong></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> xs <span class="op">=</span> [<span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>]</span></code></pre></div>
<p>The problem with this is that even though we are using <strong><em>const</em></strong> to prevent reassignments we are allowed to mutate the array as we please.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>xs[<span class="dv">1</span>] <span class="op">=</span> <span class="dv">100</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(xs) <span class="op">-&gt;</span> [<span class="dv">1</span><span class="op">,</span> <span class="dv">100</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>]</span></code></pre></div>
<p>We can luckily fix this by just giving xs the type <strong><em>ReadOnlyArray</em></strong>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> xs<span class="op">:</span> ReadOnlyArray<span class="op">&lt;</span><span class="dt">number</span><span class="op">&gt;</span> <span class="op">=</span> [<span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>]</span></code></pre></div>
<p>Now we are not allowed to mutate the array!</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>xs[<span class="dv">1</span>] <span class="op">=</span> <span class="dv">100</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(xs) <span class="op">-&gt;</span> error TS2542<span class="op">:</span> <span class="bu">Index</span> signature <span class="kw">in</span> <span class="kw">type</span> <span class="st">&#39;readonly number[]&#39;</span> only permits reading<span class="op">.</span></span></code></pre></div>
<p>This is quite awesome. Enforcing immutable data structures makes our code both easier to understand and to maintain. If you are freaked out by this and thinking that what can you even do with these data structures that cannot be changed, stop worrying!. We can still use all the functional techniques that won’t modify the values in place, but return new values instead.</p>
<p><strong><em>examples</em></strong></p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> biggerXs <span class="op">=</span> xs<span class="op">.</span><span class="fu">map</span>(x <span class="kw">=&gt;</span> x <span class="op">*</span> <span class="dv">100</span>)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> largestInXs <span class="op">=</span> xs<span class="op">.</span><span class="fu">reduce</span>((acc<span class="op">,</span> x) <span class="kw">=&gt;</span> x <span class="op">&gt;</span> acc <span class="op">?</span> x <span class="op">:</span> acc)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> evenOnly <span class="op">=</span> xs<span class="op">.</span><span class="fu">filter</span>(x <span class="kw">=&gt;</span> x <span class="op">%</span> <span class="op">==</span> <span class="dv">0</span>)</span></code></pre></div>
<h2 id="objects">Objects</h2>
<p>We can do similar things with objects.</p>
<p><strong><em>Regular way to initialize a user object.</em></strong></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> user <span class="op">=</span> {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    firstname<span class="op">:</span> <span class="st">&#39;foo&#39;</span><span class="op">,</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    lastname<span class="op">:</span> <span class="st">&#39;bar&#39;</span><span class="op">,</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    age<span class="op">:</span> <span class="dv">69</span><span class="op">,</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>I didn’t define a type or an interface because in these kinds of situations the compiler can infer the types for free. If you want to make this immutable you actually have to define an interface for the type.</p>
<p><strong>Immutable way to initialize a user object._</strong></p>
<div class="sourceCode" id="cb7"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Iuser {</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">readonly</span> firstname<span class="op">:</span> <span class="dt">string</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">readonly</span> lastname<span class="op">:</span> <span class="dt">string</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">readonly</span> age<span class="op">:</span> <span class="dt">number</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> user<span class="op">:</span> Iuser <span class="op">=</span> {</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    firstname<span class="op">:</span> <span class="st">&#39;foo&#39;</span><span class="op">,</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    lastname<span class="op">:</span> <span class="st">&#39;bar&#39;</span><span class="op">,</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    age<span class="op">:</span> <span class="dv">69</span><span class="op">,</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Not if we try to modify a field on our user we get a similar compiler error as before with arrays.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>user<span class="op">.</span><span class="at">firstname</span> <span class="op">=</span> <span class="st">&#39;bar&#39;</span> <span class="op">-&gt;</span> error TS2540<span class="op">:</span> Cannot assign to <span class="st">&#39;email&#39;</span> because it <span class="kw">is</span> a read<span class="op">-</span>only property<span class="op">.</span></span></code></pre></div>
<p>Now if we want to update the user we need some functional techniques again…</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> incUserAge <span class="op">=</span> (user<span class="op">:</span> Iuser)<span class="op">:</span> Iuser <span class="kw">=&gt;</span> ({ <span class="op">...</span>user<span class="op">,</span> age<span class="op">:</span> user<span class="op">.</span><span class="at">age</span> <span class="op">+</span> <span class="dv">1</span> })</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> birthdayBoy <span class="op">=</span> <span class="fu">incUserAge</span>(user) <span class="op">-&gt;</span> { firstname<span class="op">:</span> <span class="st">&#39;foo&#39;</span><span class="op">,</span> lastname<span class="op">:</span> <span class="st">&#39;var&#39;</span><span class="op">,</span> age<span class="op">:</span> <span class="dv">70</span> }</span></code></pre></div>
<p>That’s all I wanted to share in this blog post. Hope you found it useful. I will post more stuff related to FP in the future so consider giving me a follow if that sounds interesting ;-).</p>
]]></summary>
</entry>
<entry>
    <title>My first 8 months in the tech industry</title>
    <link href="https://japiirainen.com//posts/first-8-months.html" />
    <id>https://japiirainen.com//posts/first-8-months.html</id>
    <published>2020-12-10T00:00:00Z</published>
    <updated>2020-12-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
  <em>Posted on December 10, 2020  by Joona </em><br /><br />
</div>

<h1 id="what-ive-learned-during-my-first-8-or-so-months-in-the-tech-industry.">What I’ve learned during my first ~8 or so months in the tech industry.</h1>
<p>So I have been coding full-time for the past 8 or so months and a lot has changed in that time, both regarding my perception of the whole tech field and also my personal skills. So I thought it would be fun to share some of my thoughts about these topics!</p>
<h2 id="working-as-a-coder-means-a-lot-more-than-just-writing-code">1. Working as a “coder” means a lot more than just writing code</h2>
<p>At the very beginning of my journey in learning to write code, I thought that just being able to write let’s say JavaScript would be enough to actually work as a professional developer. Now I’ve found out that it’s not really the case. You might be able to find some job where you can only work on coding problems and focus on writing you’re favorite programming language but it’s definitely not always the case. And I’m not saying it’s a bad thing but just something to keep in mind. And maybe a fact to consider if you’re looking for a new job.</p>
<p>Now that I have been working professionally as a web developer for a few months I’ve noticed that only a fraction of my time working is actually spent writing code. There’s just so much more to it.</p>
<h2 id="the-skills-that-are-actually-useful-in-web-development">2. The skills that are actually useful in web development</h2>
<p>This kind of follows the first point in regards that only being able to write JavaScript and some basic CSS is not going to get you very far, at least if you actually have to build a finished product and get it to production.</p>
<p>Maybe the biggest thing I’ve struggled with in the past few months has been all kinds of networking related problems. To be honest I didn’t know very much about the network and everything surrounding it before I had to struggle for days just trying to get some basic Nginx configurations done for basic web apps.</p>
<p>This next point might only apply if you are working in a small company where there are no dedicated DevOps people so also the DevOps side has to be handled by the developers. This is the case in the company that I’m working in. Having to think about the DevOps side definitely also has positive sides. It makes you really think about what you are doing so you are not screwed right when you actually want to run your app somewhere else than the <em>localhost</em>. But since all the struggles I’ve had regarding this, I’ve eventually come to even kind of like it. I even spun up my own Kubernetes cluster since that seems like a really cool and powerful tool that I think is the future of deploying web apps.</p>
<p>I don’t want to sound like you wouldn’t actually need to know how to code. I’m definitely not trying to say that. It’s still the most important part of the job and probably the part you enjoy the most. So I think it’s really important to try to enjoy writing code and also striving to improve all the time.</p>
<h2 id="its-not-always-fun">3. It’s not always fun</h2>
<p>When I was studying to become a developer everything seemed to be quite fun and interesting. I think that’s because I could always choose what I’m actually doing. If I felt like reading my current favorite book, or work on my passion project, I could just do it. If one day I didn’t feel like touching my keyboard I could just take a day off or learn by watching some videos.</p>
<p>Now that I’m working for a company I have to do what they tell me to do. And that’s of course the way it should be. It just means that sometimes you have to do stuff that you don’t find interesting or quite honestly just hate doing. This is definitely a place where I need to improve. I’ve noticed that when I’m doing something that I don’t really feel like doing I’m not as productive. I know that’s probably not the way it should be, but I’m working on it!</p>
<h2 id="syntax-is-not-actually-that-difficult-at-least-most-of-the-time">4. Syntax is not actually that difficult (at least most of the time)!</h2>
<p>After learning to program in one language I found out that the majority of the mainstream languages are actually so similar in terms of the syntax. It really is more about knowing that certain things exist, because after that finding out how to write some specific thing in the desired language is easy as an google search.</p>
<p>This is not always the case though! While learning Haskell it has really been a “culture shock”. The difficult thing is not really the syntax but the way you think about problems has to be drastically different in a purely functional language like Haskell.</p>
<h2 id="you-need-to-keep-learning">5. You need to keep learning</h2>
<p>I want to end this on a positive note. Propably that almost all developers like learning new things and I have good news for you, you’re not going to run out of things to learn! I think learning new languages and technologies is the time that I’m actually having the most fun.</p>
<h3 id="list-of-things-im-currently-learning">List of things I’m currently learning</h3>
<ol type="1">
<li><p>Functional programming : This is probably the topic I have had the most interest towards for quite a while now. I’m currently tinkering with both Haskell and Clojure and just kind of trying to figure out what I like about each of them and also trying to pick up the good practices that come from the functional paradigm and bring them to the languages that I’m writing at work wich are TypeScript, JavaScript and Python.</p></li>
<li><p>Kubernetes : As I already said I spun up my own cluster on Digitalocean and I’m really excited to learn more about it and maybe try to bring it to my work in the future!</p></li>
</ol>
<p>Best regards. Joona Piirainen</p>
]]></summary>
</entry>
<entry>
    <title>Intro to Recoil.js</title>
    <link href="https://japiirainen.com//posts/intro-to-recoil.html" />
    <id>https://japiirainen.com//posts/intro-to-recoil.html</id>
    <published>2020-06-07T00:00:00Z</published>
    <updated>2020-06-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
  <em>Posted on June  7, 2020  by Joona </em><br /><br />
</div>

<p>RecoilJS is yet another state management library for React. It is maintained and open-sourced by Facebook. But why would we need another state management library since we already have so many? Well, I’m not quite qualified enough to answer this question so you should read recoilJS <a href="https://recoiljs.org/">docs</a>. But at least in my eyes recoilJS makes more complex state management simpler and removes a lot of the boilerplate that would otherwise be involved. RecoilJS syntax is Reactish as they said in the docs and it almost feels like it’s a part of the React API.</p>
<h2 id="building-a-simple-expense-tracker">Building a simple expense tracker</h2>
<p>This app is highly based on Brad Traversy’s expense tracker from his vanilla javascript projects. I just thought this would be an excellent little app that needs some state management to work. So I will be showing you how to create this fun little app using React with recoilJS.</p>
<p>This app will consist of components that will be able to:</p>
<ul>
<li>Display transaction items</li>
<li>Show balance, expense and income totals</li>
<li>Add new transaction that reflects the total amount</li>
<li>Delete items</li>
<li>Persist to local storage</li>
</ul>
<p>This tutorial assumes that you have at least some experience with React and Hooks in advance.</p>
<p><strong><em>You can find the code in this Github <a href="https://github.com/japiirainen/recoilJS-expense-tracker">Repo</a></em></strong>.</p>
<h2 id="so-lets-start-writing-it">So let’s start writing it!</h2>
<p>first, we jump into the root directory and wrap the <strong><em>App.js</em></strong> component with <strong><em>RecoilRoot</em></strong>. In this application the <strong><em>App.js</em></strong> component will contain all other components.</p>
<p><em><strong>index.js</strong></em></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> ReactDOM <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> App <span class="im">from</span> <span class="st">&#39;./App&#39;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {RecoilRoot} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>ReactDOM<span class="op">.</span><span class="fu">render</span>(</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">&lt;React.StrictMode&gt;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">&lt;RecoilRoot&gt;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>      <span class="fu">&lt;App</span> <span class="fu">/&gt;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">&lt;/RecoilRoot&gt;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">&lt;/React.StrictMode&gt;</span><span class="op">,</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">&#39;root&#39;</span>)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p><strong><em>RecoilRoot</em></strong> is the actual component that will provide our state across our whole application. You can think of it similarly to let’s say a context provider while using React’s <strong><em>useContext</em></strong> hook or a store provider when using <strong><em>redux</em></strong>.</p>
<h2 id="atoms">Atoms</h2>
<p><em><strong>atoms.js</strong></em></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {atom} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> transactionListState <span class="op">=</span> <span class="fu">atom</span>({</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">key</span><span class="op">:</span> <span class="st">&#39;transactionListState&#39;</span><span class="op">,</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">default</span><span class="op">:</span> [</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    {</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">id</span><span class="op">:</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">amount</span><span class="op">:</span> <span class="dv">10</span><span class="op">,</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">text</span><span class="op">:</span> <span class="st">&#39;Found a 10 dollar bill!&#39;</span><span class="op">,</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    }<span class="op">,</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    {</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>      <span class="dt">id</span><span class="op">:</span> <span class="dv">2</span><span class="op">,</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>      <span class="dt">amount</span><span class="op">:</span> <span class="op">-</span><span class="dv">110</span><span class="op">,</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      <span class="dt">text</span><span class="op">:</span> <span class="st">&#39;New keyboard&#39;</span><span class="op">,</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    }<span class="op">,</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    {</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>      <span class="dt">id</span><span class="op">:</span> <span class="dv">3</span><span class="op">,</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>      <span class="dt">amount</span><span class="op">:</span> <span class="dv">300</span><span class="op">,</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>      <span class="dt">text</span><span class="op">:</span> <span class="st">&#39;Sold my old Playstation!&#39;</span><span class="op">,</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    }<span class="op">,</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>  ]<span class="op">,</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>})</span></code></pre></div>
<p>In recoilJS, atoms are units of state. They are updateable and subscribable, which means that when an atom is updated, each subscribed component is re-rendered with the new value. We need to give each atom a unique key and set some default value, just like with the <strong><em>useState</em></strong> hook. My atom will eventually have an empty array([]) as its default value. I just gave some initial data, so it’s easier to understand what’s going on :-). If this is not making any sense right now, I promise it will soon!</p>
<p>Lets jump into the <strong><em>Transaction.js</em></strong> component that will contain a single transaction and later we will display many of these in the <strong><em>TransactionList.js</em></strong> component.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> Transaction <span class="op">=</span> ({transaction}) <span class="kw">=&gt;</span> {</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;li</span> <span class="ot">className</span><span class="op">=</span><span class="va">{</span>transaction<span class="op">.</span><span class="at">amount</span><span class="va">}</span><span class="kw">&gt;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>      <span class="va">{</span>transaction<span class="op">.</span><span class="at">text</span><span class="va">}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;span&gt;</span><span class="va">{</span>transaction<span class="op">.</span><span class="at">amount</span><span class="va">}</span><span class="kw">&lt;/span&gt;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;button</span> <span class="ot">className</span><span class="op">=</span><span class="st">&#39;delete-btn&#39;</span><span class="kw">&gt;</span>x<span class="kw">&lt;/button&gt;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/li&gt;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Right now we don’t have much there just a template ready to take in some data. Next, we will display the data I already have inside my <strong><em>atom</em></strong> from <strong><em>TransactionList.js</em></strong>!</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {Transaction} <span class="im">from</span> <span class="st">&#39;./Transaction&#39;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {transactionListState} <span class="im">from</span> <span class="st">&#39;../recoil/atoms&#39;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {useRecoilValue} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> TransactionList <span class="op">=</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> transactionList <span class="op">=</span> <span class="fu">useRecoilValue</span>(transactionListState)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;&gt;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;h3&gt;</span>Transaction History<span class="kw">&lt;/h3&gt;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;ul</span> <span class="ot">className</span><span class="op">=</span><span class="st">&#39;list&#39;</span><span class="kw">&gt;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="va">{</span>transactionList<span class="op">.</span><span class="fu">map</span>((transaction) <span class="kw">=&gt;</span> (</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>          <span class="fu">&lt;Transaction</span> <span class="ot">key</span><span class="op">=</span><span class="va">{</span>transaction<span class="op">.</span><span class="at">id</span><span class="va">}</span> <span class="ot">transaction</span><span class="op">=</span><span class="va">{</span>transaction<span class="va">}</span> <span class="fu">/&gt;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        ))<span class="va">}</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/ul&gt;</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/&gt;</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>So if you are familiar with react this will probably look quite similar to what you have previously seen. Here we use <strong><em>useRecoilValue</em></strong> instead of <strong><em>useRecoilState</em></strong> because we only read the current state of our <strong><em>transactionListState</em></strong> atom. Then we just map our array of transactions into the <strong><em>Transaction.js</em></strong> component and send the data down with props. Let’s take a look at the <strong><em>NewTransaction.js</em></strong> component.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React<span class="op">,</span> {useState} <span class="im">from</span> <span class="st">&#39;react&#39;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {transactionListState} <span class="im">from</span> <span class="st">&#39;../recoil/atoms&#39;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {useSetRecoilState} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {v4 <span class="im">as</span> uuidv4} <span class="im">from</span> <span class="st">&#39;uuid&#39;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> NewTransaction <span class="op">=</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [textValue<span class="op">,</span> setTextValue] <span class="op">=</span> <span class="fu">useState</span>(<span class="st">&#39;&#39;</span>)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [amount<span class="op">,</span> setAmount] <span class="op">=</span> <span class="fu">useState</span>(<span class="dv">0</span>)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> setTransactionList <span class="op">=</span> <span class="fu">useSetRecoilState</span>(transactionListState)</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> NewTransaction <span class="op">=</span> (e) <span class="kw">=&gt;</span> {</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    e<span class="op">.</span><span class="fu">preventDefault</span>()</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">setTransactionList</span>((oldTransactionList) <span class="kw">=&gt;</span> [</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>      <span class="op">...</span>oldTransactionList<span class="op">,</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>      {</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>        <span class="dt">id</span><span class="op">:</span> <span class="fu">uuidv4</span>()<span class="op">,</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        <span class="dt">amount</span><span class="op">:</span> <span class="op">+</span>amount<span class="op">,</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        <span class="dt">text</span><span class="op">:</span> textValue<span class="op">,</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>      }<span class="op">,</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    ])</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    <span class="fu">setTextValue</span>(<span class="st">&#39;&#39;</span>)</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>    <span class="fu">setAmount</span>(<span class="dv">0</span>)</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> handleTextValue <span class="op">=</span> (e) <span class="kw">=&gt;</span> {</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>    <span class="fu">setTextValue</span>(e<span class="op">.</span><span class="at">target</span><span class="op">.</span><span class="at">value</span>)</span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> handleAmount <span class="op">=</span> (e) <span class="kw">=&gt;</span> {</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>    <span class="fu">setAmount</span>(e<span class="op">.</span><span class="at">target</span><span class="op">.</span><span class="at">value</span>)</span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (</span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;&gt;</span></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;h3&gt;</span>Add new transaction<span class="kw">&lt;/h3&gt;</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;form&gt;</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;div&gt;</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;label</span> <span class="ot">htmlFor</span><span class="op">=</span><span class="st">&#39;text&#39;</span><span class="kw">&gt;</span>Description<span class="kw">&lt;/label&gt;</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;input</span> <span class="ot">value</span><span class="op">=</span><span class="va">{</span>textValue<span class="va">}</span> <span class="ot">onChange</span><span class="op">=</span><span class="va">{</span>handleTextValue<span class="va">}</span> <span class="kw">/&gt;</span></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;/div&gt;</span></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;div&gt;</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;label</span> <span class="ot">htmlFor</span><span class="op">=</span><span class="st">&#39;amount&#39;</span><span class="kw">&gt;</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>            Amount <span class="kw">&lt;br</span> <span class="kw">/&gt;</span></span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;/label&gt;</span></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>          <span class="kw">&lt;input</span> <span class="ot">value</span><span class="op">=</span><span class="va">{</span>amount<span class="va">}</span> <span class="ot">onChange</span><span class="op">=</span><span class="va">{</span>handleAmount<span class="va">}</span> <span class="kw">/&gt;</span></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;/div&gt;</span></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;button</span> <span class="ot">onClick</span><span class="op">=</span><span class="va">{</span>NewTransaction<span class="va">}</span><span class="kw">&gt;</span>Add transaction<span class="kw">&lt;/button&gt;</span></span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/form&gt;</span></span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/&gt;</span></span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>So here we need to be able to add a new transaction to our atom that contains the current state of our transactions list. Therefore we use <strong><em>useSetRecoilState</em></strong> which allows us to do just that! Our <strong><em>NewTransaction</em></strong> function sets the state to contain all the transactions that were already there and adds a new item into the list.</p>
<p>And if you were wondering what’s going on with <strong><em>id: uuidv4()</em></strong>, it’s just a library that generates some random id’s for us!</p>
<h2 id="selectors">Selectors</h2>
<p>The second core concept of Recoil is <strong><em>Selectors</em></strong>. As they state in the docs, a selector represents a piece of derived state. You can think of derived state as the output of passing state to a pure function that modifies the given state in some way. So we need to be able to calculate the total balance based on the current state of our transactionList. This is a perfect place to use a selector! We will declare a new selector in <strong><em>Selectors.js</em></strong>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {transactionListState} <span class="im">from</span> <span class="st">&#39;./atoms&#39;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {selector} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> balanceState <span class="op">=</span> <span class="fu">selector</span>({</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">key</span><span class="op">:</span> <span class="st">&#39;balanceState&#39;</span><span class="op">,</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">get</span><span class="op">:</span> ({get}) <span class="kw">=&gt;</span> {</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> transactionList <span class="op">=</span> <span class="fu">get</span>(transactionListState)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> amounts <span class="op">=</span> transactionList<span class="op">.</span><span class="fu">map</span>((transaction) <span class="kw">=&gt;</span> transaction<span class="op">.</span><span class="at">amount</span>)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> balance <span class="op">=</span> amounts<span class="op">.</span><span class="fu">reduce</span>((acc<span class="op">,</span> num) <span class="kw">=&gt;</span> (acc <span class="op">+=</span> num)<span class="op">,</span> <span class="dv">0</span>)<span class="op">.</span><span class="fu">toFixed</span>(<span class="dv">2</span>)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> balance</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  }<span class="op">,</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>})</span></code></pre></div>
<p>Selectors also take in a unique key, but they don’t have a default value, but instead, they have <strong><em>get</em></strong>and <strong><em>set</em></strong> properties. We will only need the get property so we’ll focus on that. With the get property, we can get the value of some atom and do stuff with it. In our case, we use our <strong><em>transactionListState</em></strong> atom, and we want to add together all the amount properties of the transactions. After the calculation, we just return the result, and we can use it in our <strong><em>Balance.js</em></strong> component!</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {useRecoilValue} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {balanceState} <span class="im">from</span> <span class="st">&#39;../recoil/selectors&#39;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> Balance <span class="op">=</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> balance <span class="op">=</span> <span class="fu">useRecoilValue</span>(balanceState)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;&gt;</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;h4&gt;</span>Your Balance<span class="kw">&lt;/h4&gt;</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;h1&gt;</span><span class="va">{</span>balance<span class="va">}</span><span class="kw">&lt;/h1&gt;</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/&gt;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Quite simple right? 😺</p>
<p>Now let’s make one more selector that will allow us to display the total amounts of incomes and expenses.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> expenseStatsState <span class="op">=</span> <span class="fu">selector</span>({</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">key</span><span class="op">:</span> <span class="st">&#39;expenseStatsState&#39;</span><span class="op">,</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">get</span><span class="op">:</span> ({get}) <span class="kw">=&gt;</span> {</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> transactionList <span class="op">=</span> <span class="fu">get</span>(transactionListState)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> amounts <span class="op">=</span> transactionList<span class="op">.</span><span class="fu">map</span>((transaction) <span class="kw">=&gt;</span> transaction<span class="op">.</span><span class="at">amount</span>)</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> income <span class="op">=</span> amounts</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span><span class="fu">filter</span>((num) <span class="kw">=&gt;</span> num <span class="op">&gt;=</span> <span class="dv">0</span>)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span><span class="fu">reduce</span>((acc<span class="op">,</span> num) <span class="kw">=&gt;</span> (acc <span class="op">+=</span> num)<span class="op">,</span> <span class="dv">0</span>)</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span><span class="fu">toFixed</span>(<span class="dv">2</span>)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> expense <span class="op">=</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>      amounts<span class="op">.</span><span class="fu">filter</span>((num) <span class="kw">=&gt;</span> num <span class="op">&lt;</span> <span class="dv">0</span>)<span class="op">.</span><span class="fu">reduce</span>((acc<span class="op">,</span> num) <span class="kw">=&gt;</span> (acc <span class="op">+=</span> num)<span class="op">,</span> <span class="dv">0</span>) <span class="op">*</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>      <span class="op">-</span>(<span class="dv">1</span>)<span class="op">.</span><span class="fu">toFixed</span>(<span class="dv">2</span>)</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> {</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>      income<span class="op">,</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>      expense<span class="op">,</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>  }<span class="op">,</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>})</span></code></pre></div>
<p>Lets use it in <strong><em>ExpenseStatus.js</em></strong>. We access the value a bit differently now since we returned an object that contains two values, so we use deconstructing.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {useRecoilValue} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {expenseStatsState} <span class="im">from</span> <span class="st">&#39;../recoil/selectors&#39;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> ExpenseStatus <span class="op">=</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> {income<span class="op">,</span> expense} <span class="op">=</span> <span class="fu">useRecoilValue</span>(expenseStatsState)</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;div</span> <span class="ot">className</span><span class="op">=</span><span class="st">&#39;expense-status-container&#39;</span><span class="kw">&gt;</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;div&gt;</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;h4&gt;</span> Income <span class="kw">&lt;/h4&gt;</span> <span class="kw">&lt;p</span> <span class="ot">className</span><span class="op">=</span><span class="st">&#39;money plus&#39;</span><span class="kw">&gt;</span><span class="va">{</span>income<span class="va">}</span><span class="kw">&lt;/p&gt;</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/div&gt;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;div&gt;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;h4&gt;</span> Expense <span class="kw">&lt;/h4&gt;</span> <span class="kw">&lt;p</span> <span class="ot">className</span><span class="op">=</span><span class="st">&#39;money minus&#39;</span><span class="kw">&gt;</span>-<span class="va">{</span>expense<span class="va">}</span><span class="kw">&lt;/p&gt;</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/div&gt;</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/div&gt;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<h2 id="removing-transactions">Removing transactions</h2>
<p>We are still missing the ability to remove stuff from our list of transactions, so let’s make that possible! We already have a delete button inside of our <strong><em>Transaction.js</em></strong> component so we just need to add some functionality.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {useRecoilState} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {transactionListState} <span class="im">from</span> <span class="st">&#39;../recoil/atoms&#39;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {removeItemAtIndex} <span class="im">from</span> <span class="st">&#39;../utils&#39;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> Transaction <span class="op">=</span> ({transaction}) <span class="kw">=&gt;</span> {</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [transactionList<span class="op">,</span> setTransactionList] <span class="op">=</span> <span class="fu">useRecoilState</span>(</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>    transactionListState</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> index <span class="op">=</span> transactionList<span class="op">.</span><span class="fu">findIndex</span>(</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    (listItem) <span class="kw">=&gt;</span> listItem <span class="op">===</span> transaction</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> removeTransaction <span class="op">=</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> newList <span class="op">=</span> <span class="fu">removeItemAtIndex</span>(transactionList<span class="op">,</span> index)</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>    <span class="fu">setTransactionList</span>(newList)</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> sign <span class="op">=</span> transaction<span class="op">.</span><span class="at">amount</span> <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">?</span> <span class="st">&#39;-&#39;</span> <span class="op">:</span> <span class="st">&#39;+&#39;</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (</span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;li</span> <span class="ot">className</span><span class="op">=</span><span class="va">{</span>transaction<span class="op">.</span><span class="at">amount</span> <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">?</span> <span class="st">&#39;minus&#39;</span> <span class="op">:</span> <span class="st">&#39;plus&#39;</span><span class="va">}</span><span class="kw">&gt;</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>      <span class="va">{</span>transaction<span class="op">.</span><span class="at">text</span><span class="va">}</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;span&gt;</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>        <span class="va">{</span>sign<span class="va">}</span>$<span class="va">{</span><span class="bu">Math</span><span class="op">.</span><span class="fu">abs</span>(transaction<span class="op">.</span><span class="at">amount</span>)<span class="va">}</span></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/span&gt;</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;button</span> <span class="ot">className</span><span class="op">=</span><span class="st">&#39;delete-btn&#39;</span> <span class="ot">onClick</span><span class="op">=</span><span class="va">{</span>removeTransaction<span class="va">}</span><span class="kw">&gt;</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>        x</span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/button&gt;</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/li&gt;</span></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a><span class="co">//  helper function for removing a transaction</span></span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> removeItemAtIndex <span class="op">=</span> (arr<span class="op">,</span> index) <span class="kw">=&gt;</span> {</span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> [<span class="op">...</span>arr<span class="op">.</span><span class="fu">slice</span>(<span class="dv">0</span><span class="op">,</span> index)<span class="op">,</span> <span class="op">...</span>arr<span class="op">.</span><span class="fu">slice</span>(index <span class="op">+</span> <span class="dv">1</span>)]</span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Now we finally use <strong><em>useRecoilState</em></strong>! As you can see it’s just like using the <strong><em>useState</em></strong> hook in vanilla React. The reason I need to do <strong><em>Math.abs()</em></strong> which gives me the absolute value of the number we pass into it is that it makes all the negative numbers positive, so the logic for putting the sign ahead of the number doesn’t get messed up.</p>
<h2 id="finally">Finally!</h2>
<p>Let’s implement local storage, so all our transactions don’t disappear if we reload our page! We just need to update two of our components to get this working.</p>
<p>Firstly @ <strong><em>NewTransaction.js</em></strong> we just add this code snippet after our <strong><em>NewTransaction</em></strong> function to set all transactions that we create to localStorage. We also need to change from using <strong><em>useSetRecoilState</em></strong> to <strong><em>useRecoilState</em></strong> since we need to pass our transactionList to localStorage.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">useEffect</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  localStorage<span class="op">.</span><span class="fu">setItem</span>(<span class="st">&#39;TRANSACTION_LIST&#39;</span><span class="op">,</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(transactionList))</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>}<span class="op">,</span> [transactionList])</span></code></pre></div>
<p>And <span class="citation" data-cites="*">@*</span>*<em>TransactionList.js</em><strong> we switch from using </strong>_useRecoilValue_<strong> to</strong>_useRecoilState_** since if we find some transactions in local localStorage we need to set the list state to match that.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode jsx"><code class="sourceCode javascriptreact"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React<span class="op">,</span> {useEffect} <span class="im">from</span> <span class="st">&#39;react&#39;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {Transaction} <span class="im">from</span> <span class="st">&#39;./Transaction&#39;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {transactionListState} <span class="im">from</span> <span class="st">&#39;../recoil/atoms&#39;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> {useRecoilState} <span class="im">from</span> <span class="st">&#39;recoil&#39;</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> <span class="kw">const</span> TransactionList <span class="op">=</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [transactionList<span class="op">,</span> setTransactionList] <span class="op">=</span> <span class="fu">useRecoilState</span>(</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    transactionListState</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">useEffect</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">setTransactionList</span>(<span class="bu">JSON</span><span class="op">.</span><span class="fu">parse</span>(localStorage<span class="op">.</span><span class="fu">getItem</span>(<span class="st">&#39;TRANSACTION_LIST&#39;</span>)))</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>  }<span class="op">,</span> [setTransactionList])</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (</span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;&gt;</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;h3&gt;</span>Transaction History<span class="kw">&lt;/h3&gt;</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;ul</span> <span class="ot">className</span><span class="op">=</span><span class="st">&#39;list&#39;</span><span class="kw">&gt;</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>        <span class="va">{</span>transactionList <span class="op">!==</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>          transactionList<span class="op">.</span><span class="fu">map</span>((transaction) <span class="kw">=&gt;</span> (</span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>            <span class="fu">&lt;Transaction</span> <span class="ot">key</span><span class="op">=</span><span class="va">{</span>transaction<span class="op">.</span><span class="at">id</span><span class="va">}</span> <span class="ot">transaction</span><span class="op">=</span><span class="va">{</span>transaction<span class="va">}</span> <span class="fu">/&gt;</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>          ))<span class="va">}</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>      <span class="kw">&lt;/ul&gt;</span></span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/&gt;</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>So that’s it! I hope you found this article useful in some way.</p>
<p>👋🏼👋🏼</p>
]]></summary>
</entry>

</feed>
